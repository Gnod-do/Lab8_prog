package server.utility;

import common.utility.Outputer;

import java.sql.*;

public class DatabaseHandler {
    // Table names
    public static final String GROUP_TABLE = "study_group";

    public static final String USER_TABLE = "my_user";

    public static final String COORDINATES_TABLE = "coordinates";

    public static final String PERSON_TABLE = "person";

    // GROUP_TABLE column names

    public static final String GROUP_TABLE_ID_COLUMN = "id";

    public static final String GROUP_TABLE_NAME_COLUMN = "name";

    public static final String GROUP_TABLE_CREATION_DATE_COLUMN = "creation_date";

    public static final String GROUP_TABLE_STUDENTS_COUNT_COLUMN = "students_count";

    public static final String GROUP_TABLE_TRANSFERRED_STUDENTS_COLUMN = "transferred_students";

    public static final String GROUP_TABLE_FORM_OF_EDUCATION_COLUMN = "form_of_education";

    public static final String GROUP_TABLE_SEMESTER_COLUMN = "semester";

    public static final String GROUP_TABLE_PERSON_ID_COLUMN = "person_id";

    public static final String GROUP_TABLE_USER_ID_COLUMN = "user_id";

    // USER_TABLE column names

    public static final String USER_TABLE_ID_COLUMN = "id";

    public static final String USER_TABLE_USERNAME_COLUMN = "username";

    public static final String USER_TABLE_PASSWORD_COLUMN = "password";

    // COORDINATES_TABLE column names

    public static final String COORDINATES_TABLE_ID_COLUMN = "id";

    public static final String COORDINATES_TABLE_STUDY_GROUP_ID_COLUMN = "study_group_id";

    public static final String COORDINATES_TABLE_X_COLUMN = "x";

    public static final String COORDINATES_TABLE_Y_COLUMN = "y";

    //PERSON_TABLE column names

    public static final String PERSON_TABLE_ID_COLUMN = "id";

    public static final String PERSON_TABLE_NAME_COLUMN = "name";

    public static final String PERSON_TABLE_BIRTHDAY_COLUMN = "birthday";

    public static final String PERSON_TABLE_HEIGHT_COLUMN = "height";

    public static final String PERSON_TABLE_WEIGHT_COLUMN = "weight";

    public static final String PERSON_TABLE_PASSPORT_ID_COLUMN = "passport_id";


    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private String url;

    private String user;

    private String password;

    private Connection connection = null;

    public DatabaseHandler(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
            Outputer.println("Dang ket noi voi database");
//            connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/Lab7DB", "postgres", "21052002");
            connection = DriverManager.getConnection(url, user, password);
            if (connection != null) {
                System.out.println("Connection Established");
            } else {
                System.out.println("Connection Failed");
            }

            Outputer.println("Соединение с базой данных установлено.");
        } catch (SQLException exception) {
            Outputer.println(exception.getMessage());
            Outputer.printerror("Произошла ошибка при подключении к базе данных!");
        } catch (ClassNotFoundException exception) {
            Outputer.printerror("Драйвер управления базой дынных не найден!");
        }
    }

    /**
     * @param sqlStatement SQL statement to be prepared.
     * @param generateKeys Is keys needed to be generated.
     * @return Prepared statement.
     * @throws SQLException When there's exception inside.
     */

    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException exception) {
            if (connection == null) Outputer.printerror("Соединение с базой данных не установлено!");
            throw new SQLException(exception);
        }
    }

    /**
     * Close prepared statement.
     *
     * @param sqlStatement SQL statement to be closed.
     */

    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
        } catch (SQLException exception) {
        }
    }

    /**
     * Close connection to database.
     */

    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Outputer.println("Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            Outputer.printerror("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    /**
     * Set commit mode of database.
     */

    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception){
        }
    }

    /**
     * Set normal mode of database.
     */

    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
        }
    }

    /**
     * Commit database status.
     */

    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            Outputer.printerror("An error occurred while committing");
        }
    }

    /**
     * Roll back database status.
     */

    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            Outputer.printerror("An error occurred while rolling back");
        }
    }

    /**
     * Set save point of database.
     */

    public void setSavePoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            Outputer.printerror("An error occurred while saving point");
        }
    }

}

